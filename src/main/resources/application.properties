
# spring.batch.initialize-schema=always
spring.main.web-application-type=none
spring.batch.jdbc.initialize-schema=always
# spring.sql.init.schema-locations=org/springframework/batch/core/schema-postgresql.sql

batch.datasource.url=${CNPJ_BATCH_DATASOURCE_URL:jdbc:postgresql://localhost:5432/mux?currentSchema=cnpj}
batch.datasource.username=${CNPJ_BATCH_DATASOURCE_USERNAME:postgres}
batch.datasource.password=${CNPJ_BATCH_DATASOURCE_PASSWORD:postgres}
batch.datasource.hikari.connectionTimeout=${CNPJ_BATCH_DATASOURCE_CONN_TIMEOUT:20000}
batch.datasource.hikari.maximumPoolSize=${CNPJ_BATCH_DATASOURCE_MAX_PULL_SIZE:5}

## default connection pool
spring.datasource.cnpj.hikari.connectionTimeout=${CNPJ_BATCH_DATASOURCE_CONN_TIMEOUT:20000}
spring.datasource.cnpj.hikari.maximumPoolSize=${CNPJ_BATCH_DATASOURCE_MAX_PULL_SIZE:5}

## PostgreSQL
spring.datasource.cnpj.url=${CNPJ_BATCH_DATASOURCE_URL:jdbc:postgresql://localhost:5432/mux?currentSchema=cnpj}
spring.datasource.cnpj.username=${CNPJ_BATCH_DATASOURCE_USERNAME:postgres}
spring.datasource.cnpj.password=${CNPJ_BATCH_DATASOURCE_PASSWORD:postgres}
spring.sql.init.platform=postgresql

# spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.properties.hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy

#drop n create table again, good for testing, comment this in production
# spring.jpa.generate-ddl=true
# spring.jpa.hibernate.ddl-auto=create
# spring.sql.init.mode=always

spring.jpa.properties.hibernate.jdbc.batch_size=60

app.config.chunkSize=${CNPJ_BATCH_CHUNK_SIZE:10000}
#must be full path
app.config.csvLocation=${CNPJ_BATCH_CSV_LOCATION:/data/import}
spring.flyway.locations=classpath:db/migration
spring.flyway.user=${CNPJ_BATCH_FLYWAY_USERNAME:postgres}
spring.flyway.password=${CNPJ_BATCH_FLYWAY_PASSWORD:postgres}
